{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","Pages/QuotesPage.js"],"names":["module","exports","QuoteItem","props","className","classes","item","text","author","to","id","QuoteList","quotes","ascending","navigate","useNavigate","location","useLocation","isSortedAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","console","log","sorting","onClick","pathname","list","map","quote","NoQuotesFound","noquotes","Quotes","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","LoadingSpinner","length"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,mBCA3DD,EAAOC,QAAU,CAAC,SAAW,kC,iFCiBdC,EAhBG,SAACC,GACjB,OACE,qBAAIC,UAAWC,IAAQC,KAAvB,UACE,mCACE,qCACE,4BAAIH,EAAMI,SAEZ,qCAAaJ,EAAMK,YAErB,cAAC,IAAD,CAASC,GAAE,kBAAaN,EAAMO,IAAMN,UAAU,MAA9C,iC,wBCkCSO,EA/BG,SAACR,GACjB,IAVkBS,EAAQC,EAUpBC,EAAWC,cACXC,EAAWC,cAEXC,EAAgD,QADlC,IAAIC,gBAAgBH,EAASI,QACXC,IAAI,QACpCC,GAdYV,EAccT,EAAMS,OAdZC,EAcoBK,EAbvCN,EAAOW,MAAK,SAACC,EAAQC,GAC1B,OAAIZ,EACKW,EAAOd,GAAKe,EAAOf,GAAK,GAAK,EAE7Bc,EAAOd,GAAKe,EAAOf,GAAK,GAAK,MAUxCgB,QAAQC,IAAIT,GAIZ,OACE,eAAC,WAAD,WACE,qBAAKd,UAAWC,IAAQuB,QAAxB,SACE,yBAAQC,QANM,WAClBf,EAAS,GAAD,OAAIE,EAASc,SAAb,iBAA8BZ,EAAiB,eAKnD,kBACQA,EAAoB,aAAe,iBAG7C,oBAAId,UAAWC,IAAQ0B,KAAvB,SACGT,EAAaU,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEEvB,GAAIuB,EAAMvB,GACVF,OAAQyB,EAAMzB,OACdD,KAAM0B,EAAM1B,MAHP0B,EAAMvB,a,wCCpBRwB,EAXO,WACpB,OACE,sBAAK9B,UAAWC,IAAQ8B,SAAxB,UACE,iDACA,cAAC,IAAD,CAAM/B,UAAU,MAAMK,GAAG,aAAzB,6BC4BS2B,UA3BA,WACb,MAKIC,YAAQC,KAAc,GAJxBC,EADF,EACEA,YACAC,EAFF,EAEEA,OACMC,EAHR,EAGEC,KACAC,EAJF,EAIEA,MAKF,OAHAC,qBAAU,WACRL,MACC,CAACA,IACW,YAAXC,EAEA,qBAAKpC,UAAU,WAAf,SACE,cAACyC,EAAA,EAAD,MAIS,UAAXL,EACK,qBAAKpC,UAAU,mBAAf,SAAmCuC,IAE7B,cAAXH,GAA4BC,GAAwC,IAAxBA,EAAaK,OAGtD,cAAC,EAAD,CAAYlC,OAAQ6B,IAFlB,cAAC,EAAD","file":"static/js/3.913eaf9d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__3ZpCo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3_s9w\",\"sorting\":\"QuoteList_sorting__4EzhS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__1_WoR\"};","import classes from \"./QuoteItem.module.css\";\nimport { NavLink } from \"react-router-dom\";\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <NavLink to={`/quotes/${props.id}`} className=\"btn\">\n        View Fullscreen\n      </NavLink>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from \"react\";\n\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\nconst QuoteList = (props) => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const isSortedAscending = queryParams.get(\"sort\") === \"asc\";\n  const sortedQuotes = sortQuotes(props.quotes, isSortedAscending);\n  console.log(isSortedAscending);\n  const sortHandler = () => {\n    navigate(`${location.pathname}?sort=${isSortedAscending ? `des` : `asc`}`);\n  };\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={sortHandler}>\n          Sort {isSortedAscending ? \"Descending\" : \"Ascending\"}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import classes from \"./NoQuotesFound.module.css\";\nimport { Link } from \"react-router-dom\";\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link className=\"btn\" to=\"/new-quote\">\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import React from \"react\";\r\nimport QuotesList from \"../components/quotes/QuoteList\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getAllQuotes } from \"../lib/api\";\r\nimport { useEffect } from \"react\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\r\n\r\nconst Quotes = () => {\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuotes,\r\n    error,\r\n  } = useHttp(getAllQuotes, true);\r\n  useEffect(() => {\r\n    sendRequest();\r\n  }, [sendRequest]);\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n  if (status === \"error\") {\r\n    return <div className=\"centered focused\">{error}</div>;\r\n  }\r\n  if (status === \"completed\" && (!loadedQuotes || loadedQuotes.length === 0)) {\r\n    return <NoQuotesFound />;\r\n  }\r\n  return <QuotesList quotes={loadedQuotes} />;\r\n  // return <h2>Quotes Pagew</h2>;\r\n};\r\n\r\nexport default Quotes;\r\n"],"sourceRoot":""}